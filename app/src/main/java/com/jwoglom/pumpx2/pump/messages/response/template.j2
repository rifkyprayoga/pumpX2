package com.jwoglom.pumpx2.pump.messages.response;

import com.google.common.base.Preconditions;
import com.jwoglom.pumpx2.pump.messages.Bytes;
import com.jwoglom.pumpx2.pump.messages.Message;
import com.jwoglom.pumpx2.pump.messages.MessageType;
import com.jwoglom.pumpx2.pump.messages.annotations.MessageProps;
import com.jwoglom.pumpx2.pump.messages.request.{{requestName}};

import java.math.BigInteger;

@MessageProps(
    opCode={{responseOpcode}},
    size={{responseSize}},
    type=MessageType.RESPONSE,
    request={{requestName}}.class
)
public class {{responseName}} extends Message {
    {% for arg in responseArgs %}
    private {{ arg.type }} {{ arg.name }};{% endfor %}
    {% if responseSize > 0 %}
    public {{responseName}}() {}
    {% endif %}
    public {{responseName}}({% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        {% if responseSize == 0 %}this.cargo = EMPTY;
        {% else %}this.cargo = buildCargo({% for arg in responseArgs %}{{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %});
        {% for arg in responseArgs %}this.{{ arg.name }} = {{ arg.name }};
        {% endfor %}{% endif %}
    }

    public void parse(byte[] raw) {
        Preconditions.checkArgument(raw.length == props().size());
        this.cargo = raw;
        {% for arg in responseArgs %}this.{{ arg.name }} = {% if arg.size == 1 %}raw[{{ arg.index }}];
        {% elif arg.size == 2 %}Bytes.readShort(raw, {{ arg.index }});
        {% elif arg.size == 4 %}Bytes.readUint32(raw, {{ arg.index }});
        {% elif arg.size == 8 %}Bytes.readUint64(raw, {{ arg.index }});
        {% else %}// {{ arg.size }} at {{ arg.index }}{% endif %}{% endfor %}
    }

    {% if responseSize > 0 %}
    public static byte[] buildCargo({% for arg in responseArgs %}{{ arg.type }} {{ arg.name }}{{ ", " if not loop.last else "" }}{% endfor %}) {
        return Bytes.combine({% for arg in responseArgs %}{% if arg.size == 1 %}
            new byte[]{ (byte) {{ arg.name }} }{% elif arg.size == 2 %}
            Bytes.firstTwoBytesLittleEndian({{ arg.name }}){% elif arg.size == 4 %}
            Bytes.toUint32({{ arg.name }}){% elif arg.size == 8 %}
            Bytes.toUint64({{ arg.name }}.longValue()){% else %}
            // {{ arg.size }} at {{ arg.index }}
            {% endif %}{{ ", " if not loop.last else "" }}{% endfor %});
    }
    {% endif %}
    {% for arg in responseArgs %}public {{ arg.type }} get{{ arg.name[0]|upper }}{{ arg.name[1:] }}() {
        return {{ arg.name }};
    }
    {% endfor %}
}
